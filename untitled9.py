# -*- coding: utf-8 -*-
"""Untitled9.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Z4AIA5H_7UiIAxF35vQosXfj-V49-wK9
"""

import numpy as np
import pandas as pd
import pandas as pd
from sklearn.metrics import mean_absolute_error
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeRegressor

df1 = pd.read_csv('/content/recipe.csv')

df1.columns

df1['name']

df2 = pd.read_csv('/content/recipe_CuisineLabel.csv')
df2.columns

df2.drop(['link','ingredients','keywords','name','recipe_category',], axis = 1, inplace = True)

df2.columns

df3 = pd.read_csv('/content/recipe_cuisine_recipe_info.csv')
df3.columns

df3['cuisine']

df1['recipe_category']

null_columns1 = [cols for cols in df1.columns if df1[cols].isnull().sum() > 0]
for cols in null_columns1:
    print(cols, df1[cols].isnull().sum())

for cols in null_columns1:
  df1[cols] = df1[cols].fillna(0)

null_columns3 = [cols for cols in df3.columns if df3[cols].isnull().sum() > 0]
for cols in null_columns3:
    print(cols, df3[cols].isnull().sum())

#fill null values with 0
for cols in null_columns3:
  df3[cols] = df3[cols].fillna(0)

#droping columns
df1.drop(['link','ingredients','keywords','name'], axis = 1, inplace = True)

df1.drop(['recipe_category'], axis=1, inplace=True)

df1.columns

df3.drop(['recipe_link','ingredients','keywords','name','recipe_category'], axis = 1, inplace = True)
df3.columns

print(df1.shape)
print(df3.shape)

df4 = pd.merge(df1,df3, on = ['recipe_cuisine','rating','rating_count'], how = 'left', indicator = True)

df4.columns

df4.drop(['_merge'], axis=1, inplace=True)

df4.columns

print(df4.shape)
print(df2.shape)

df_new = pd.merge(df2,df4, on = ['recipe_cuisine','rating','rating_count'], how = 'left', indicator = True)

df_new.columns

df_new.drop(['cuisine'], axis=1, inplace=True)

df_new.drop(['_merge'], axis=1, inplace=True)

"""# New Section"""

df_new.drop(['CuisineLabel'], axis=1, inplace=True)

df_new['recipe_cuisine']

df_new.drop(['recipe_cuisine'], axis=1, inplace=True)



df_new['rating'].fillna(0)

#saving this new dataframe into a csv file
df_new.to_csv('new_dataset.csv', index = True)

df_new['rating'] = df_new['rating'].str.replace('/4','')

df_new['rating']

df_new['rating'].fillna(0, inplace = True)

df_new['rating_count'].fillna(0, inplace = True)

df_new['rating_count']

df_new['rating'] = df_new['rating'].astype(float)

#get the highest ratings*rating_count values for each col1
df_new['final_rating'] = df_new['rating'] * df_new['rating_count']

df_new['final_rating']

df_new.head()

#TRAIN the model

from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier

# Splitting your data into training and testing sets
outcomes = df_new['col1']
features = df_new['final_rating']
X_train, X_test, y_train, y_test = train_test_split(features, outcomes, test_size=0.2, random_state=42)

# Reshaping X_train and X_test to make them 2D arrays
X_train = X_train.values.reshape(-1, 1)
X_test = X_test.values.reshape(-1, 1)

# Creating a DecisionTreeClassifier with specified parameters
classifier = DecisionTreeClassifier(max_depth=50, min_samples_leaf=6, min_samples_split=2)

# Fitting the model on the training data
classifier.fit(X_train, y_train)

# Predicting on the training and testing data
y_train_pred = classifier.predict(X_train)
y_test_pred = classifier.predict(X_test)

from sklearn.metrics import accuracy_score

# Calculating accuracy for training and testing data
train_accuracy = accuracy_score(y_train, y_train_pred)
test_accuracy = accuracy_score(y_test, y_test_pred)

print('The training accuracy is', train_accuracy)
print('The test accuracy is', test_accuracy)